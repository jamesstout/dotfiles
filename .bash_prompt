#!/usr/bin/env bash


# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles and 
# https://github.com/necolas/dotfiles/blob/master/bash/bash_prompt
# Screenshot: http://i.imgur.com/s0Blh.png
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

tput sgr 0 0

# Base styles and color palette
# Solarized colors
# https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized
BOLD=$(tput bold)
RESET=$(tput sgr0)
SOLAR_YELLOW=$(tput setaf 136)
SOLAR_ORANGE=$(tput setaf 166)
SOLAR_RED=$(tput setaf 124)
# shellcheck disable=SC2034
SOLAR_MAGENTA=$(tput setaf 125)
# shellcheck disable=SC2034
SOLAR_VIOLET=$(tput setaf 61)
# shellcheck disable=SC2034
SOLAR_BLUE=$(tput setaf 33)
SOLAR_CYAN=$(tput setaf 37)
SOLAR_GREEN=$(tput setaf 64)
SOLAR_WHITE=$(tput setaf 254)

style_user="\[${RESET}${SOLAR_ORANGE}\]"
style_host="\[${RESET}${SOLAR_YELLOW}\]"
style_path="\[${RESET}${SOLAR_GREEN}\]"
style_chars="\[${RESET}${SOLAR_WHITE}\]"
style_branch="${SOLAR_CYAN}"

if [[ "$SSH_TTY" ]]; then
    # connected via ssh
    style_host="\[${BOLD}${SOLAR_RED}\]"
elif [[ "$USER" == "root" ]]; then
    # logged in as root
    style_user="\[${BOLD}${SOLAR_RED}\]"
fi

is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
    $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

is_cocoapods_repo() {
    local repo_name
    repo_name=$(git rev-parse --show-toplevel 2> /dev/null)
    if [[ "$repo_name" =~ cocoapods ]]; then
        return 0
    else
        return 1
    fi
}

get_git_branch() {
    local branch_name

    # Get the short symbolic ref
    branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"

    printf "%s" "$branch_name"
}

# Git status information
prompt_git() {
    local git_info git_state uc us ut st cr

    cr=1
    if ! is_git_repo || is_git_dir; then
        return 1
    fi

    if ! is_cocoapods_repo; then
        # ensure index is up to date
        git update-index --really-refresh  -q &>/dev/null
        cr=0
    fi

    git_info=$(get_git_branch)

    # remember git will ignore empty dirs
    # unless they contain a .gitignore file
    # so the prompt should be correct
    # with the caveat that it ignores any new empty folders
    # if ! is_cocoapods_repo; then
    if [ "$cr" -eq 0 ]; then
        # Check for uncommitted changes in the index
        if ! $(git diff --quiet --ignore-submodules --cached); then
            uc="+"
        fi

        # Check for unstaged changes
        if ! $(git diff-files --quiet --ignore-submodules --); then
            us="!"
        fi

        # Check for untracked files
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            ut="?"
        fi

        # Check for stashed files
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            st="$"
        fi
    fi

    git_state=$uc$us$ut$st

    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info[$git_state]"
    fi

    printf "${SOLAR_WHITE} on ${style_branch}${git_info}"
}

#export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"   # mem/file sync
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi

# Make new shells get the history lines from all previous
# shells instead of the default "last window closed" history
PROMPT_COMMAND='history 1 >> ${HOME}/.bash_eternal_history'

#my old version
#PROMPT_COMMAND="history -a;history -c; history -r; $PROMPT_COMMAND;"

#hstr version 
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND};"

# Set the terminal title to the current working directory
PS1="\[\033]0;\h: \w\007\]"
#PS1="\[\033]0;\W\007\]"
# Build the prompt
PS1+="\n" # Newline
PS1+="${style_user}\u" # Username
PS1+="${style_chars}@" # @
PS1+="${style_host}\h" # Host
PS1+="${style_chars}: " # :
PS1+="${style_path}\w" # Working directory
PS1+="\$(prompt_git)" # Git details
PS1+="\n" # Newline
PS1+="${style_chars}\$ \[${RESET}\]" # $ (and reset color)
