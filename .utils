#!/usr/bin/env bash

# Header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}
# debug logging
e_debug() {
    printf "$(tput setaf 2)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

git_pull(){

    git_info=$(get_git_branch)
    e_debug "exec git pull -v origin $git_info"
    git pull -v origin "$git_info"
}

cd_and_git_pull(){

    e_debug "cd to $1"
    cd "$1" || exit 255
    
    if ! is_git_repo ; then
        e_warning "Not a git repo"
    else
        git_pull
    fi
    cd - 1>/dev/null || exit 255
}

function doiTermIntegrationCheck(){

    e_header "Checking for iterm2_shell_integration update."
    
    TEMP_DIR="${TMPDIR}iterm2_shell_integration"

    if dir_exists "$TEMP_DIR"; then
        e_debug "$TEMP_DIR exists, removing"
        rm -rf "$TEMP_DIR" ||  return 1
    fi

    e_debug "[Re]creating $TEMP_DIR"
    mkdir -p "$TEMP_DIR" ||  return 1
    chmod 777 "$TEMP_DIR"

    OUR_SHELL=$(basename $SHELL)
    NEW_FILE="${TEMP_DIR}"/.iterm2_shell_integration."${OUR_SHELL}"

    curl -s -L https://iterm2.com/shell_integration/"${OUR_SHELL}" -o "$NEW_FILE"

    NEW_VER=$(grep ShellIntegrationVersion "$NEW_FILE" | cut -d ';' -f 2 | cut -d '=' -f 2)
    CUR_VER=$(grep ShellIntegrationVersion "$SCRIPT_DIR"/.iterm2_shell_integration."${OUR_SHELL}" | cut -d ';' -f 2 | cut -d '=' -f 2)

    # e_debug "new - $NEW_VER"
    # e_debug "cur - $CUR_VER"

    if [ "$NEW_VER" -gt "$CUR_VER" ]; then
        e_debug "We have a new version [$NEW_VER] vs [$CUR_VER]. Copying new version to $SCRIPT_DIR"
        cp -f "$NEW_FILE" "$SCRIPT_DIR" ||  return 1
    else
        e_debug "No new version, still at [$CUR_VER]"
    fi
    return 0
}

# Test whether we're in a git repo
#is_git_repo() {
#    $(git rev-parse --is-inside-work-tree &> /dev/null)
#}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

dir_exists() {
    if [ -d "$1" ]; then
      return 0
    fi
    return 1
}

file_exists() {
    if [ -e "$1" ]; then
      return 0
    fi
    return 1
}

create_formula_list_file(){
   $(brew list >  "$SCRIPT_DIR"/forms )
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if $(brew list $1 >/dev/null 2>&1); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

formula_exists2() {

   # echo ".. $1"
   # strip off any params from --
    b=${1% --*} 

    #echo ".. $b"

    if $(grep $b "$SCRIPT_DIR"/forms >/dev/null 2>&1); then
        printf "%s already installed.\n" "$b"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

