#!/usr/bin/env bash

# Header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}
# debug logging
e_debug() {
    printf "$(tput setaf 2)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

git_pull(){

    git_info=$(get_git_branch)
    e_debug "exec git pull -v origin $git_info"
    git pull -v origin "$git_info"
}

cd_and_git_pull(){

    e_debug "cd to $1"
    cd "$1" || exit 255
    
    if ! is_git_repo ; then
        e_warning "Not a git repo"
    else
        git_pull
    fi
    cd - 1>/dev/null || exit 255
}

# Test whether we're in a git repo
#is_git_repo() {
#    $(git rev-parse --is-inside-work-tree &> /dev/null)
#}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

dir_exists() {
    if [ -d "$1" ]; then
      return 0
    fi
    return 1
}

file_exists() {
    if [ -e "$1" ]; then
      return 0
    fi
    return 1
}
# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if brew list "$1" >/dev/null; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}
