#!/usr/bin/env bash
# shellcheck shell=bash
NUM=0
QUEUE=""
MAX_NPROC=2 # default
REPLACE_CMD=0 # no replacement by default

readonly program="$(basename "$0")"

USAGE="A simple wrapper for running processes in parallel.
Usage: $program [-h] [-r] [-j nb_jobs] command arg_list
    -h      Shows this help
    -r      Replace asterix * in the command string with argument
    -j nb_jobs  Set number of simultanious jobs [2]
 Examples:
    $program somecommand arg1 arg2 arg3
    $program -j 3 \"somecommand -r -p\" arg1 arg2 arg3
    $program -j 6 -r \"convert -scale 50% * small/small_*\" *.jpg"
 
function queue {
    QUEUE="$QUEUE $1"
    NUM=$((NUM+1))
}
 
function regeneratequeue {
    OLDREQUEUE=$QUEUE
    QUEUE=""
    NUM=0
    for PID in $OLDREQUEUE
    do
        if [ -d /proc/"$PID"  ] ; then
            QUEUE="$QUEUE $PID"
            NUM=$((NUM+1))
        fi
    done
}

escape_string() {
    echo "$1" | sed "s/'/'\\\''/g;s/^\(.*\)$/'\1'/"
}

function checkqueue {
    OLDCHQUEUE=$QUEUE
    for PID in $OLDCHQUEUE
    do
        if [ ! -d /proc/"$PID" ] ; then
            regeneratequeue # at least one PID has finished
            break
        fi
    done
}
 
# parse command line
if [ $# -eq 0 ]; then #  must be at least one arg
    echo "$USAGE" >&2
    exit 1
fi
 
while getopts j:rh OPT; do # "j:" waits for an argument "h" doesnt
    case $OPT in
    h)  echo "$USAGE"
        exit 0 ;;
    j)  MAX_NPROC=$OPTARG ;;
    r)  REPLACE_CMD=1 ;;
    \?) # getopts issues an error message
        echo "$USAGE" >&2
        exit 1 ;;
    esac
done
 
MIN_QUALITY="75"
# Main program
echo "Using $MAX_NPROC paraldlel threads"
# /usr/local/Cellar/pngquant/2.8.2/bin/pngquant
# for imgName in $(find -E "/Users/james/Desktop/hhh" -iregex '.*(png)'); do
for imgName in /Users/james/Desktop/hhh/*.png; do


    echo $(escape_string "$imgName")

    # CMD="/Applications/ImageAlpha.app/Contents/MacOS/pngquant --quality=$MIN_QUALITY-100 --ext=.png --force --skip-if-larger --speed=1 -- $(escape_string "$imgName")"
    CMD="/usr/local/Cellar/pngquant/2.8.2/bin/pngquant --quality=$MIN_QUALITY-100 --ext=.png --force --skip-if-larger --speed=1 -- $(escape_string "$imgName")"

    # echo "Running $CMD "

    BG="&"

    eval "$CMD" $BG
    # DEFINE COMMAND END
 
    PID=$!
    queue $PID
 
    while [ $NUM -ge $MAX_NPROC ]; do
        checkqueue
        sleep 0.4
    done
done
wait # wait for all processes to finish before exit
